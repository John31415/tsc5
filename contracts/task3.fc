#include "imports/stdlib.fc";

;; All the code in recv_internal, get_storage, wrap_storage, and version
;; serves as an example of the intended structure.

;; The provided code is an "empty wrapper." It:
;; + Parses "wrapped" incoming messages (discards versioning information)
;; + "Wraps" the call to the version-specific process_message
;; + Implements "get_storage" for version-specific get-methods
;; However, it does not yet implement any upgrade logic, which is your task.

;; The empty wrapper is provided to demonstrate
;; how version-specific code is intended to be "wrapped" and interacted with.
;; You may delete and rewrite as needed,
;; but the final implementation must adhere to the same structure

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    var expected_version = in_msg_body~load_uint(32); 
    ifnot(expected_version){
        set_data(wrap_storage(1, get_data()));
        return ();
    }
    var new_code = in_msg_body~load_maybe_ref();
    var migrations = in_msg_body~load_dict(); 
    cell payload = in_msg_body~load_ref();
    if(version() == expected_version){
        cell storage = get_storage();
        storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
        set_data(wrap_storage(expected_version, storage));
        return ();
    }
    throw_if(200, new_code.null?());
    var node_version = version();
    int flag = -1;
    int band = -1;
    while(flag & band){
        (slice node_version_s, flag) = migrations.udict_get?(32, node_version);
        if(flag){
            node_version = node_version_s~load_uint(32);
            if(node_version == expected_version){
                band = 0;
            }
        }
    }
    throw_if(400, band);
    var node_version = version(); 
    int flag = -1;
    int band = -1;
    cell storage = get_storage();
    while(flag & band){
        (slice node_version_s, flag) = migrations.udict_get?(32, node_version);
        if(flag){
            node_version = node_version_s~load_uint(32);
            var migration_code = node_version_s~load_maybe_ref();
            if(~ migration_code.null?()){
                set_c3(migration_code.begin_parse().bless());
                storage = migrate_one(storage);
            }
            if(node_version == expected_version){
                band = 0;
            }
        }
    }
    storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
    set_data(wrap_storage(node_version, storage));
    set_code(new_code);
    ;; set_c3(new_code.begin_parse().bless());
}

cell get_storage() {
    slice data = get_data().begin_parse();
    data~load_uint(32);
    cell storage = data~load_ref();
    return storage;
}

cell wrap_storage(int version_id, cell storage) {
    return begin_cell()
                .store_uint(version_id, 32)
                .store_ref(storage)
            .end_cell();
}

int version() method_id {
    slice cs = get_data().begin_parse();
    int version_id = cs~load_uint(32);
    return version_id;
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>
