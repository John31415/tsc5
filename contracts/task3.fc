#include "imports/stdlib.fc";

forall X -> int is_null (X x) asm "ISNULL";

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    var expected_version = in_msg_body~load_uint(32); 
    ifnot(expected_version){
        set_data(wrap_storage(1, get_data()));
        return ();
    }
    if(version() == expected_version){
        set_data(wrap_storage(expected_version, process_message(get_storage(), msg_value, balance, in_msg_full, in_msg_body.preload_ref().begin_parse())));
        return ();
    }
    var new_code = in_msg_body~load_maybe_ref();
    throw_if(200, new_code.null?());
    var migrations = in_msg_body~load_dict(); 
    cell payload = in_msg_body~load_ref();
    var node_version = version();
    int flag = -1;
    int band = -1;
    (slice node_version_s, flag) = migrations.udict_get?(32, node_version);
    tuple t = null();
    while(flag & band){
        node_version = node_version_s~load_uint(32);
        var migration_code = node_version_s~load_maybe_ref();
        if(~ migration_code.null?()){
            t = cons(migration_code, t);
        }
        if(node_version == expected_version){
            band = 0;
        }
        (node_version_s, flag) = migrations.udict_get?(32, node_version);
    }
    throw_if(400, band);
    cell storage = get_storage();
    while(~ t.is_null()){
        (var migration_code, t) = uncons(t);
        set_c3(migration_code.begin_parse().bless());
        storage = migrate_one(storage);
    }
    set_c3(new_code.begin_parse().bless());
    set_code(new_code);
    set_data(wrap_storage(node_version, process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse())));
}

cell get_storage() {
    return get_data().begin_parse().preload_ref();
}

cell wrap_storage(int version_id, cell storage) {
    return begin_cell().store_uint(version_id, 32).store_ref(storage).end_cell();
}

int version() method_id {
    return get_data().begin_parse().preload_uint(32);
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>
