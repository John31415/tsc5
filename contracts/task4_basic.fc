#include "imports/stdlib.fc";

forall X -> tuple set_index_var(tuple t, X value, int position) asm "SETINDEXVAR";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
forall X -> (X, tuple) uncons(tuple list) asm "UNCONS";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int , int , int , tuple) solve(int n , int m, tuple maze) method_id {
    
    int s1 = 0;
    int s2 = 0;
    int e1 = 0;
    int e2 = 0;
    
    ;;INICIALIZAR-SOLVE

    tuple SOLVE = empty_tuple();
    int it1 = 0;
    repeat(n){
        tuple SOLVE_AUX = empty_tuple();
        int it2 = 0;
        repeat(m){
            if(maze.at(it1).at(it2) == 83){
                SOLVE_AUX~tpush(0);
                s1 = it1;
                s2 = it2;
            }
            else {
                SOLVE_AUX~tpush(1000000000000000);
            }
            if(maze.at(it1).at(it2) == 69){
                e1 = it1;
                e2 = it2;
            }
            it2 += 1;
        }
        SOLVE~tpush(SOLVE_AUX);
        it1 += 1;
    }

    ;; DIJKSTRA

    tuple cola = null();
    cola = cons(s1 * 100 + s2 , cola);
    while(~ cola.null?()){
        tuple cola_aux = null();
        (int top , cola) = uncons(cola);
        while(~ cola.null?()){
            (int last , cola) = uncons(cola);
            if(last < top){
                cola_aux = cons(top , cola_aux);
                top = last;
            }
            else {
                cola_aux = cons(last , cola_aux);
            }
        }
        while(~ cola_aux.null?()){
            (int last , cola_aux) = uncons(cola_aux);
            cola = cons(last , cola);
        }
        int a = top % 10000 / 100;
        int b = top % 100;
        int it1 = -1;
        repeat(3){
            int it2 = -1;
            repeat(3){
                if((it1 != 0) & (it2 != 0)){
                    int x = a + it1;
                    int y = b + it2;
                    if((0 <= x) & (x <= n - 1) & (0 <= y) & (y <= m - 1)){
                        int peso = 1;
                        if(maze.at(x).at(y) == 88){
                            peso = 1000001;
                        }
                        if(maze.at(x).at(y) == 63){
                            peso = 1001;
                        }
                        if(SOLVE.at(x).at(y) > SOLVE.at(a).at(b) + peso){
                            tuple t_aux = empty_tuple();
                            t_aux = SOLVE.at(x);
                            t_aux = t_aux.set_index_var(SOLVE.at(a).at(b) + peso,y);
                            SOLVE = SOLVE.set_index_var(t_aux,x);
                            int val = (SOLVE.at(x).at(y) * 10000) + (x * 100) + (y);
                            cola = cons(val , cola);
                        }
                    }
                }
                it2 += 1;
            }
            it1 += 1;
        }
    }
    if(SOLVE.at(e1).at(e2) >= 1000000){
        return (-1 , 0 , 0 , null());
    }

    ;; RECONSTRUCCION

    int a = e1;
    int b = e2;
    while(~ ((a == s1) & (b == s2))){
        int x = a;
        int y = b;
        int peso = SOLVE.at(a).at(b);
        if((a > 0)){
            if(b < m - 1){
                if(SOLVE.at(a - 1).at(b + 1) < peso){
                    peso = SOLVE.at(a - 1).at(b + 1);
                    x = a - 1;
                    y = b + 1;
                }
            }
            if(b > 0){
                if(SOLVE.at(a - 1).at(b - 1) < peso){
                    peso = SOLVE.at(a - 1).at(b - 1);
                    x = a - 1;
                    y = b - 1;
                }
            }
            if(SOLVE.at(a - 1).at(b) < peso){
                peso = SOLVE.at(a - 1).at(b);
                x = a - 1;
                y = b;
            }
        }
        if((b > 0)){
            if(SOLVE.at(a).at(b - 1) < peso){
                peso = SOLVE.at(a).at(b - 1);
                x = a;
                y = b - 1;
            }
        }
        if((b < m - 1)){
            if(SOLVE.at(a).at(b + 1) < peso){
                peso = SOLVE.at(a).at(b + 1);
                x = a;
                y = b + 1;
            }
        }
        if((a < n - 1)){
            if(b < m - 1){
                if(SOLVE.at(a + 1).at(b + 1) < peso){
                    peso = SOLVE.at(a + 1).at(b + 1);
                    x = a + 1;
                    y = b + 1;
                }
            }
            if(b > 0){
                if(SOLVE.at(a + 1).at(b - 1) < peso){
                    peso = SOLVE.at(a + 1).at(b - 1);
                    x = a + 1;
                    y = b - 1;
                }
            }
            if(SOLVE.at(a + 1).at(b) < peso){
                peso = SOLVE.at(a + 1).at(b);
                x = a + 1;
                y = b;
            }
        }
        a = x;
        b = y;
        if(~ ((a == s1) & (b == s2))){
            tuple t_aux = empty_tuple();
            t_aux = maze.at(a); 
            t_aux = t_aux.set_index_var(33,b);
            maze = maze.set_index_var(t_aux,a);
        }
    }


    ;; RETURN 
    ;; int val0 = SOLVE.at(e1).at(e2) / 1000000;
    int val1 = (SOLVE.at(e1).at(e2) % 1000000) / 1000;
    int val2 = SOLVE.at(e1).at(e2) % 1000;

    return (-1 , val1 , val2 , maze);
}  