#include "imports/stdlib.fc";

forall X -> tuple set_index_var(tuple t, X value, int position) asm "SETINDEXVAR";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
forall X -> (X, tuple) uncons(tuple list) asm "UNCONS";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int , int , int , tuple) solve(int n , int m, tuple maze) method_id {
    
    int s1 = 0;
    int s2 = 0;
    int e1 = 0;
    int e2 = 0;

    ;; ARISTAS
    
    tuple edges = null();
    int i = 0;
    repeat(n){
        int j = 0;
        repeat(m){
            if(maze.at(i).at(j) == 83){
                s1 = i;
                s2 = j;
            }
            if(maze.at(i).at(j) == 69){
                e1 = i;
                e2 = j;
            }
            tuple t = empty_tuple();
            if((i > 0) & (j > 0)){
                t.tpush(i * m + j);
                t.tpush((i - 1) * m + (j - 1));
                if(maze.at(i - 1).at(j - 1) == 88){
                    t.tpush(1000001);
                }
                else{
                    if(maze.at(i - 1).at(j - 1) == 63){
                        t.tpush(1001);
                    }
                    else{
                        t.tpush(1);
                    }
                }
            }
            t~cons(edges);
            tuple t = empty_tuple();
            if(i > 0){
                t.tpush(i * m + j);
                t.tpush((i - 1) * m + j);
                if(maze.at(i - 1).at(j) == 88){
                    t.tpush(1000001);
                }
                else{
                    if(maze.at(i - 1).at(j) == 63){
                        t.tpush(1001);
                    }
                    else{
                        t.tpush(1);
                    }
                }
            }
            t~cons(edges);
            tuple t = empty_tuple();
            if(j > 0){
                t.tpush(i * m + j);
                t.tpush(i * m + (j - 1));
                if(maze.at(i).at(j - 1) == 88){
                    t.tpush(1000001);
                }
                else{
                    if(maze.at(i).at(j - 1) == 63){
                        t.tpush(1001);
                    }
                    else{
                        t.tpush(1);
                    }
                }
            }
            t~cons(edges);
            tuple t = empty_tuple();
            if((i > 0) & (j < m - 1)){
                t.tpush(i * m + j);
                t.tpush((i - 1) * m + (j + 1));
                if(maze.at(i - 1).at(j + 1) == 88){
                    t.tpush(1000001);
                }
                else{
                    if(maze.at(i - 1).at(j + 1) == 63){
                        t.tpush(1001);
                    }
                    else{
                        t.tpush(1);
                    }
                }
            }
            t~cons(edges);
            j += 1;
        }
        i += 1;
    }
    
    ;;BELLMAN-FORD

    tuple SOLVE = empty_tuple();
    repeat(n * m){
        SOLVE.tpush(1000000000000);
    }
    SOLVE = SOLVE.set_index_var(0,s1 * m + s2);
    repeat(n * m - 1){
        tuple edges_aux = null();
        while(~edges.null?()){
            (tuple ahora , edges) = uncons(edges);
            SOLVE = SOLVE.set_index_var(min(SOLVE.at(ahora.at(0))+ahora.at(2),SOLVE.at(ahora.at(1))),ahora.at(1));
            ahora~cons(edges_aux);
        }
        while(~edges_aux.null?()){
            (tuple ahora , edges_aux) = uncons(edges_aux);
            ahora~cons(edges);
        }
    }
    if(SOLVE.at(e1 * m + e2) >= 1000000){
        return (-1 , 0 , 0 , null());
    }

    ;; RECONSTRUCCION

    int a = e1;
    int b = e2;
    while((a != s1) | (b != s2)){
        tuple t_aux = empty_tuple();
        t_aux = maze.at(a);
        t_aux = t_aux.set_index_var(33,b);
        maze = maze.set_index_var(t_aux,a);
        int x = 10000000000000;
        int y = 10000000000000;
        int peso = 10000000000000;
        if((a > 0) & (b > 0)){
            if(SOLVE.at((a - 1) * m + (b - 1)) < peso){
                peso = SOLVE.at((a - 1) * m + (b - 1));
                x = a - 1;
                y = b - 1;
            }
        }
        if((a > 0)){
            if(SOLVE.at((a - 1) * m + b) < peso){
                peso = SOLVE.at((a - 1) * m + b);
                x = a - 1;
                y = b;
            }
        }
        if((a > 0) & (b < m - 1)){
            if(SOLVE.at((a - 1) * m + (b + 1)) < peso){
                peso = SOLVE.at((a - 1) * m + (b + 1));
                x = a - 1;
                y = b + 1;
            }
        }
        if((b > 0)){
            if(SOLVE.at(a * m + (b - 1)) < peso){
                peso = SOLVE.at(a * m + (b - 1));
                x = a;
                y = b - 1;
            }
        }
        if((b < m - 1)){
            if(SOLVE.at(a * m + (b + 1)) < peso){
                peso = SOLVE.at(a * m + (b + 1));
                x = a;
                y = b + 1;
            }
        }
        if((a < n - 1) & (b > 0)){
            if(SOLVE.at((a + 1) * m + (b - 1)) < peso){
                peso = SOLVE.at((a + 1) * m + (b - 1));
                x = a + 1;
                y = b - 1;
            }
        }
        if((a < n - 1)){
            if(SOLVE.at((a + 1) * m + b) < peso){
                peso = SOLVE.at((a + 1) * m + b);
                x = a + 1;
                y = b;
            }
        }
        if((a < n - 1) & (b < m - 1)){
            if(SOLVE.at((a + 1) * m + (b + 1)) < peso){
                peso = SOLVE.at((a + 1) * m + (b + 1));
                x = a + 1;
                y = b + 1;
            }
        }
        a = x;
        b = y;
    }
    tuple t_aux = empty_tuple();
    t_aux = maze.at(a);
    t_aux = t_aux.set_index_var(33,b);
    maze = maze.set_index_var(t_aux,a);

    ;; RETURN 

    return (-1 , SOLVE.at(a * m + b) / 1000 , SOLVE.at(a * m + b) % 1000 , maze);
} 