#include "imports/stdlib.fc";

() set_data(cell c) impure asm "c4 POP";
int now() asm "NOW";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int get_seqno() method_id {
    slice data = get_data().begin_parse();
    var (_, _, _, seqno) = (data~load_uint(256), data~load_uint(32), data~load_msg_addr(), data~load_uint(32));
    return seqno;
}

int get_execution_time() method_id {
    slice data = get_data().begin_parse();
    var (_, execution_time) = (data~load_uint(256), data~load_uint(32));
    return execution_time;
}

() recv_external(slice in_msg) impure {
    var op = in_msg~load_uint(32);
    slice data = get_data().begin_parse();
    if(op == 0x9df10277){
        var (query_id, signature) = (in_msg~load_uint(64), in_msg~load_bits(512));
        cell ref_cell = in_msg~load_ref();
        cell hash_c = ref_cell; 
        slice ref_s = ref_cell.begin_parse();
        var (public_key, execution_time, receiver, seqno) = (data~load_uint(256), data~load_uint(32), data~load_msg_addr(), data~load_uint(32));
        var (locked_for, new_seqno) = (ref_s~load_uint(32), ref_s~load_uint(32));    
        throw_if(119,new_seqno != (seqno + 1));
        throw_unless(120, check_signature(cell_hash(hash_c), signature, public_key));
        throw_if(121,locked_for <= 0);
        throw_if(122,execution_time < now());
        throw_if(123,(now() + locked_for) < execution_time);
        accept_message();
        execution_time = now() + locked_for;
        seqno += 1;
        set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
    }
    else {
        var (_, execution_time, receiver) = (data~load_uint(256), data~load_uint(32), data~load_msg_addr());
        throw_if(124, execution_time > now());
        accept_message();
        cell msg = begin_cell().store_uint(0x18, 6).store_slice(receiver).store_coins(0).store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1).end_cell();
        send_raw_message(msg, 128);
    }
}
