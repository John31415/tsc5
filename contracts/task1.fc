#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int get_seqno() method_id {
    slice data = get_data().begin_parse();
    var (_, _, _, seqno) = (data~load_uint(256), data~load_uint(32), data~load_msg_addr(), data~load_uint(32));
    return seqno;
}

int get_execution_time() method_id {
    slice data = get_data().begin_parse();
    var (_, execution_time) = (data~load_uint(256), data~load_uint(32));
    return execution_time;
}

() recv_external(slice in_msg) impure {
    var (op, query_id, signature) = (in_msg~load_uint(32), in_msg~load_uint(64), in_msg~load_bits(512));
    cell ref_cell = in_msg~load_ref();
    slice ref_s = ref_cell.begin_parse();
    slice hash_s = ref_s;
    slice data = get_data().begin_parse();
    var (public_key, execution_time, receiver, seqno) = (data~load_uint(256), data~load_uint(32), data~load_msg_addr(), data~load_uint(32));
    var (locked_for, new_seqno) = (ref_s~load_uint(32), ref_s~load_uint(32));    
    throw_if(119,new_seqno != (seqno + 1));
    throw_unless(120, check_signature(slice_hash(hash_s), signature, public_key));
    throw_if(121,locked_for <= 0);
    throw_if(122,execution_time < now());
    throw_if(123,(now() + locked_for) < execution_time);
    execution_time = now() + locked_for;
    seqno += 1;
    set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
}  
